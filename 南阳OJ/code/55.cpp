/*
描述 
      小明很想吃果子，正好果园果子熟了。在果园里，小明已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。
	  小明决定把所有的果子合成一堆。 因为小明比较懒，为了省力气，小明开始想点子了:
　　每一次合并，小明可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，
就只剩下一堆了。小明在合并果子时总共消耗的体力等于每次合并所耗体力之和。 
　　因为还要花大力气把这些果子搬回家，所以小明在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数
和每种果子的数目，你的任务是设计出合并的次序方案，使小明耗费的体力最少，并输出这个最小的体力耗费值。 
　　例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，
又得到新的堆，数目为12，耗费体力为12。所以小明总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。 
输入 
第一行输入整数N(0<N<=10)表示测试数据组数。接下来每组测试数据输入包括两行，第一行是一个整数n(1<＝n<=12000)，表示果子的种类数。
第二行包含n个整数，用空格分隔，第i个整数ai(1<＝ai<=20000)是第i种果子的数目。 
输出 
每组测试数据输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。 
样例输入 
1
3 
1 2 9
样例输出 
15
*/
/*
与哈弗曼编码是一样的，都要利用哈夫曼树
哈夫曼树是：使得各叶子节点其大小与其到根节点的路径长度乘积的和达到最小的树。
同时也真没有想到数据这么大
scanf("%l64d",&n);
__int64 c[12000],b[12000]={0};
printf("%l64d\n",s);

*/
#include<stdio.h>
#include<iostream>
#include<queue>
#include<string.h>
using namespace std;
int main()
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		priority_queue<int,vector<int>,greater<int> > Q;
		int t,a,b,c,n,i;
		long long s;
		scanf("%d",&n);
		for(i=0;i<n;i++)
		{
			scanf("%d",&t);
			Q.push(t);
		}
		s=0;
		while(Q.size()!=1)
		{
			a=Q.top();Q.pop();
			b=Q.top();Q.pop();
			c=a+b;
			Q.push(c);
			s+=c;
		}
		printf("%lld\n",s);//反正对于long long(_int64) 不是"%I64d"就是"%lld" 
	}
	return 0;
}
